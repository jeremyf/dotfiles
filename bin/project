#!/usr/bin/env ruby -w

project_name = ARGV[0]
if !project_name && ENV['PWD']
  project_name = ENV['PWD'].split("/").last
end

if project_name
  # project_file_name = File.join(
  #   ENV['HOME'],
  #   'Projects',
  #   "#{project_name}.sublime-project"
  # )
  repository_dirname = File.join(
    ENV['HOME'],
    'git',
    project_name
  )

  unless File.exist?(repository_dirname)
    $stdout.puts %(Missing unable to find #{project_name.inspect})
    $stdout.puts %(  in #{File.dirname(repository_dirname)}")
    exit(-1)
  end

  # unless File.exist?(project_file_name)
  #   # Creating the default project; Note this is very much configured for a
  #   # Rails project.
  #   File.open(project_file_name, 'w+') do |file|
  #     file.puts %({)
  #     file.puts %(  "folders":)
  #     file.puts %(  [)
  #     file.puts %(    {)
  #     file.puts %(      "path": "#{repository_dirname}",)
  #     file.puts %(      "folder_exclude_patterns": [)
  #     file.puts %(        ".yardoc",)
  #     file.puts %(        "pkg",)
  #     file.puts %(        "tags",)
  #     file.puts %(        "doc",)
  #     file.puts %(        "coverage",)
  #     file.puts %(        "tmp",)
  #     file.puts %(        "jetty",)
  #     file.puts %(        ".bundle",)
  #     file.puts %(        ".yardoc")
  #     file.puts %(      ],)
  #     file.puts %(      "file_exclude_patterns": [)
  #     file.puts %(        ".tag*",)
  #     file.puts %(        "*.gif",)
  #     file.puts %(        "*.jpg",)
  #     file.puts %(        "tags",)
  #     file.puts %(        "*.png",)
  #     file.puts %(        ".tags",)
  #     file.puts %(        ".tags_sorted_by_file",)
  #     file.puts %(        "*.log",)
  #     file.puts %(        "*.sqlite3",)
  #     file.puts %(        "*.sql")
  #     file.puts %(      ])
  #     file.puts %(    })
  #     file.puts %(  ],)
  #     file.puts %(  "settings":)
  #     file.puts %(  {)
  #     file.puts %(    "tab_size": 2)
  #     file.puts %(  })
  #     file.puts %(})
  #   end

  #   # Working with the file system, I may need to wait.
  #   sleep(1)
  # end
  `atom #{repository_dirname} -n --clear-window-state --wait`
  exit(0)
else
  $stdout.puts "Example `#{File.basename(__FILE__)} project_name`"
  exit(-1)
end
